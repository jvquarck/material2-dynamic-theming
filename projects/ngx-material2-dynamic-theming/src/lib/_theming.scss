@import '~@angular/material/theming';

// Include mat-core so we can monkey patch
@include mat-core();

// Apply monkey patches
@import 'angular-components.overrides';


// TODO: investigate: how this can be provided in such way the user can provide overrides
$MAIN_PALETTE_SIZE: 14;
$GRADIENTS_K: (
  0.15,
  0.3,
  0.5,
  0.7,
  0.85,
  1,
  0.85,
  0.7,
  0.5,
  0.35,
  0.20,
  0.15,
  0.10,
  0.05,
);

$GRADIENTS: (
  50,
  100,
  200,
  300,
  400,
  500,
  600,
  700,
  800,
  900,
  A100,
  A200,
  A400,
  A700,
);

$AA_CONTRAST_SCORE: 4.5;
$AAA_CONTRAST_SCORE: 7;

/**
  * Returns values compatible with to use as inside custom properties alongside mat-color functions
*/
@function hex-to-custom-properties($hex) {
  @return floor(red($hex)), floor(green($hex)), floor(blue($hex));
}

// @deprecated
@function generate-custom-material-palette($colorOrMap, $name) {
  @if type-of($colorOrMap) == 'map' {
    $default: map-get($colorOrMap, default);
  } @else {
    $default: $colorOrMap;
  }

  $auto_map: (
    default: var(--#{$sidebar-width}-palette-default, hex-to-custom-properties($default)),
  )

}

@function get-material-palette-index($index) {
  @return if($index == 0, 50,
    if($index < 10, ($index * 100),
      if($index == 10, A100,
        if($index == 11, A200,
          if($index == 12, A400,
            if($index == 13, A700, '')
          )
        )
      )
    )
  );
}

@function auto-generate-palettes($mainColor, $paletteName, $contrastRatio: $AA_CONTRAST_SCORE) {

  $palette: ();
  $foregroundPalette: ();

  @for $i from 0 through $MAIN_PALETTE_SIZE - 1 {
    @if $i < 5 {
      $lightnessPercent: (1 - nth($GRADIENTS_K, $i + 1)) * (100% - lightness($mainColor));
      $color: lighten($mainColor, $lightnessPercent);
      $foregroundColor: getForeGroundColor($color, $contrastRatio);
      $paletteIndex: get-material-palette-index($i);
      $palette: map-merge($palette, ($paletteIndex: var(--#{$paletteName}-palette-#{$paletteIndex}, hex-to-custom-properties($color))));
      $foregroundPalette: map-merge($foregroundPalette, ($paletteIndex: var(--#{$paletteName}-palette-#{$paletteIndex}-foreground, hex-to-custom-properties($foregroundColor))));
    }
    @if $i == 5 {
      $foregroundColor: getForeGroundColor($mainColor, $contrastRatio);
      $paletteIndex: get-material-palette-index($i);
      $palette: map-merge($palette, ($paletteIndex: var(--#{$paletteName}-palette-#{$paletteIndex}, hex-to-custom-properties($mainColor))));
      $foregroundPalette: map-merge($foregroundPalette, ($paletteIndex: var(--#{$paletteName}-palette-#{$paletteIndex}-foreground, hex-to-custom-properties($foregroundColor))));
    }
    @if $i > 5 {
      $darknessPercent: (1 - nth($GRADIENTS_K, $i + 1)) * lightness($mainColor);
      $color: darken($mainColor, $darknessPercent);
      $foregroundColor: getForeGroundColor($color, $contrastRatio);
      $paletteIndex: get-material-palette-index($i);
      $palette: map-merge($palette, ($paletteIndex: var(--#{$paletteName}-palette-#{$paletteIndex}, hex-to-custom-properties($color))));
      $foregroundPalette: map-merge($foregroundPalette, ($paletteIndex: var(--#{$paletteName}-palette-#{$paletteIndex}-foreground, hex-to-custom-properties($foregroundColor))));
    }
  }
  // @debug map-merge($palette, (contrast: $foregroundPalette));
  @return map-merge($palette, (contrast: $foregroundPalette));
}

/**
 * Credits to:
 * https://www.bhalash.com/archives/13544805657
 * Exponential Number
 * -----------------------------------------------------------------------------
 * Raise a number to a given power.
 *
 * @param   number      $number         Number to raise.
 * @param   number      $power          Power to which it should be raised.
 * @return  number      $exponent       Number raised to exponent.
 */

 @function power($number, $power) {
  $exponent: 1;

  @if $power > 0 {
      @for $i from 1 through $power {
          $exponent: $exponent * $number;
      }
  } @else if $power < 0 {
      @for $i from 1 through $power {
          $exponent: $exponent / $number;
      }
  }

  @return $exponent;
}

/**
  * Credits to:
  * https://www.madebymike.com.au/writing/accessible-contrast-with-less-and-sass/
*/
@function luminance($color) {
    $rgba: red($color), green($color), blue($color);
    $rgba2: ();
    @for $i from 1 through 3 {
      $rgb: nth($rgba, $i);
      $rgb: $rgb / 255;
      $rgb: if($rgb < .03928, $rgb / 12.92, power(($rgb + .055) / 1.055, 2.4));
      $rgba2: append($rgba2, $rgb);
    }
    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;
}

/**
  * Credits to:
  * https://www.madebymike.com.au/writing/accessible-contrast-with-less-and-sass/
*/
@function contrastRatio($color1, $color2) {
  $luma1: luminance($color1) + 5;
  $luma2: luminance($color2) + 5;
  $ratio: $luma1 / $luma2;
  @if $luma1 < $luma2 {
    $ratio: 1 / $ratio;
  }
  @return $ratio;
}

// The range for color brightness difference is 125. The range for color difference is 500. ~ https://www.w3.org/TR/AERT/#color-contrast
// @deprecated
@function isBrightColor($color, $contrastRatio: 125) {
  $o: (((red($color) * 299) + (blue($color) * 587) + (green($color) * 114)) / 1000);
  @return $o > $brightFactor;
}

/**
  * AutoGenerate foreground colors depending on brightness
  * http://www.w3.org/TR/AERT#color-contrast
*/
@function getForeGroundColor($backgroundColor: #FFFFFF, $contrastFactor: $AA_CONTRAST_SCORE) {
  @return if(contrastRatio($backgroundColor, #FFFFFF) > $contrastFactor, #FFFFFF, #000000);
}
