{"version":3,"file":"material2-dynamic-theming.js.map","sources":["ng://material2-dynamic-theming/lib/definitions.ts","ng://material2-dynamic-theming/lib/utils.ts","ng://material2-dynamic-theming/lib/theming.service.ts","ng://material2-dynamic-theming/lib/theming.module.ts"],"sourcesContent":["export interface PaletteValues {\n  default: string;\n  lighter?: string;\n  darker?: string;\n  hover?: string;\n  contrast?: {\n      default?: string;\n      lighter?: string;\n      darker?: string;\n      hover?: string;\n  };\n}\n\nexport interface ThemingExtraOptions {\n  autoAdjust: boolean; // If true, check if the derived colors from the default one need some extra adjusting based on 'brightnessFactor' property.\n  brightnessFactor?: number;\n}\n\nexport enum Palettes {\n  primary = 'primary',\n  secondary = 'secondary',\n  warn = 'warn',\n  dark = 'dark',\n}\n\nexport enum CommonPaletteValues {\n  Default = 'default',\n  Lighter = 'lighter',\n  Darker = 'darker',\n  Hover = 'hover',\n}\n\nexport type PaletteMap<C extends object, T> = { [P in keyof C]: T };\n\nexport type PaletteValuesType = PaletteMap<typeof Palettes, PaletteValues | string>;\n\nexport const OPACITY_FACTOR = .4;\nexport const HOVER_OPACITY_FACTOR = .2;\nexport const FOREGROUND_COLORS_BRIGHT_FACTOR = 200;\nexport const BACKGROUND_COLORS_BRIGHT_FACTOR = 245;\nexport const AUTO_GENERATE_FOREGROUNDS = true;\n\nexport const DEFAULT_THEME_PALETTES: PaletteValuesType = {\n    primary: '#3F51B5',\n    secondary: '#FFD31F',\n    dark: '#616161',\n    warn: '#F44336',\n};\n\nexport const DEFAULT_THEMING_EXTRA_OPTIONS: ThemingExtraOptions = {\n    autoAdjust: false,\n    brightnessFactor: BACKGROUND_COLORS_BRIGHT_FACTOR\n};\n","import { ElementRef } from '@angular/core';\nimport { color as d3Color, rgb } from 'd3-color';\n// import { getProperty } from '../../../utils/object.utils';\nimport { AUTO_GENERATE_FOREGROUNDS, CommonPaletteValues as CommonPaletteValuesEnum, DEFAULT_THEMING_EXTRA_OPTIONS, FOREGROUND_COLORS_BRIGHT_FACTOR, OPACITY_FACTOR, Palettes, PaletteValues, ThemingExtraOptions } from './definitions';\n\nexport const DARKENING_K: number = OPACITY_FACTOR;\nexport const BRIGHTEN_K: number = OPACITY_FACTOR;\nexport const BRIGHTEN_HOVER_K: number = 1;\nexport const LIGHT_LIGHTEN_K: number = .9;\nexport const LIGHT_DARKEN_K: number = .7;\nexport const LIGHT_HOVER_K: number = .5;\n\nconst CommonPaletteValues: string[] = Object.values(CommonPaletteValuesEnum);\n\n/**\n * Returns a solid color that is the resulting of adding opacity to <color> and having a <background> beneath it\n * @param color hex value color\n * @param background hex value background color\n * @param opacity 0 to 1 opacity value\n */\nexport function getSolidColorFromOpacityBackground(color: string, background: string, opacity: number): string {\n    const delta: number = 1 - opacity;\n    const dColor = d3Color(color).rgb();\n    const dBackgroundColor = d3Color(background).rgb();\n    return rgb(Math.round(dColor.r + ((dBackgroundColor.r - dColor.r) * delta)),\n        Math.round(dColor.g + ((dBackgroundColor.g - dColor.g) * delta)),\n        Math.round(dColor.b + ((dBackgroundColor.b - dColor.b) * delta))).hex();\n}\n\n/**\n * Returns a new color brighter depending on k\n * @param color hex color (e.g.: #FFFFFF)\n * @param k (from 0 to 1)\n */\nexport function getDarkerColor(color: string, k: number): string {\n    try {\n        return getSolidColorFromOpacityBackground(color, '#000000', k);\n    } catch (error) {\n        console.warn('d3-color', 'darker', `Wrong color ${ color } provided`);\n        return color;\n    }\n}\n\n/**\n * Returns a new color brighter depending on k\n * @param color hex color (e.g.: #FFFFFF)\n * @param k (from 0 to 1)\n */\nexport function getBrighterColor(color: string, k: number): string {\n    try {\n        return getSolidColorFromOpacityBackground(color, '#FFFFFF', k);\n    } catch (error) {\n        console.warn('d3-color', 'brighter', `Wrong color ${ color } provided`);\n        return color;\n    }\n}\n\n// full credit to: http://geniuscarrier.com/copy-object-in-javascript/\n/**\n * Shallow copy keeps references to original objects, arrays or functions within the new object,\n * so the \"copy\" is still linked to the original object. In other words, they will be pointing to the same memory location.\n * @param oldObj\n */\nexport function shallowCopy(oldObj) {\n  const newObj = {};\n  for(var i in oldObj) {\n      if(oldObj.hasOwnProperty(i)) {\n          newObj[i] = oldObj[i];\n      }\n  }\n  return newObj;\n}\n\n// full credit to: http://geniuscarrier.com/copy-object-in-javascript/\n/**\n * Deep copy duplicates everything, and allocates memory in a different location.\n * @param oldObj\n */\nexport function deepCopy(oldObj) {\n  let newObj = oldObj;\n  if (oldObj && typeof oldObj === 'object') {\n      newObj = Object.prototype.toString.call(oldObj) === \"[object Array]\" ? [] : {};\n      for (let i in oldObj) {\n          newObj[i] = deepCopy(oldObj[i]);\n      }\n  }\n  return newObj;\n}\n\n/**\n * Return the desired property from an object if found\n * @param obj target Object\n * @param path path to the desired property with . notation i.e: 'path.to.object'\n */\nexport function getProperty(obj: any, path: string): any {\n  if(/^([A-Za-z\\d]+\\.?)*$/.test(path)) {\n    let pathParts = path.split('.');\n    if(obj.hasOwnProperty(pathParts[0])) {\n      if(pathParts.length === 1) {\n        return obj[pathParts[0]];\n      } else {\n        return getProperty(obj, pathParts.slice(1).join('.'));\n      }\n    }\n  }\n  return void 0;\n}\n\nexport class ThemingUtil {\n\n    /**\n     * Returns the color and its lighter and darker versions [color, lighter, darker]\n     * @param color\n     */\n    static getColorsFromBase(color: string): [string, string, string, string] {\n        return [\n                ThemingUtil.getColorString(color),\n                ThemingUtil.getColorString(getBrighterColor(color, BRIGHTEN_K)),\n                ThemingUtil.getColorString(getDarkerColor(color, DARKENING_K)),\n                ThemingUtil.getColorString(getBrighterColor(color, BRIGHTEN_HOVER_K)),\n            ];\n    }\n\n    /**\n     * Returns the colors [default, lighten, darken, hover] for a color that is considered 'bright'.\n     * @param color\n     */\n    static getColorsFromLightColor(color: string): [string, string, string, string] {\n        return [\n            ThemingUtil.getColorString(color),\n            ThemingUtil.getColorString(getDarkerColor(color, LIGHT_LIGHTEN_K)),\n            ThemingUtil.getColorString(getDarkerColor(color, LIGHT_DARKEN_K)),\n            ThemingUtil.getColorString(getDarkerColor(color, LIGHT_HOVER_K)),\n        ];\n    }\n\n    /**\n     * Get hex value from a color string either if it comes in #FFFFFF or 255, 255, 255 notation\n     * @param hexColor\n     */\n    static getColorString(hexColor: string): string {\n        const dColor = rgb(hexColor);\n        return `${ dColor.r },${ dColor.g },${ dColor.b }`;\n    }\n\n    /**\n     * Get a random hex color\n     */\n    static getRandomHex(): string {\n        return ThemingUtil.getHexValueFromColor(\n            `${ Math.floor(Math.random() * 255) },${ Math.floor(Math.random() * 255) },${ Math.floor(Math.random() * 255) }`\n        );\n    }\n\n    /**\n     * Generic method to get custom properties\n     * @param elementRef elementRef element where custom properties will be retrieved from\n     * @param customProperties list of properties to get\n     */\n    static getCustomProperties(elementRef: ElementRef, customProperties: string[]) {\n        const styles = getComputedStyle(elementRef.nativeElement);\n        return customProperties.map((propertyName: string) => {\n            return styles.getPropertyValue(propertyName);\n        });\n    }\n\n    /**\n     * Generic method to set custom properties\n     * @param elementRef elementRef element where custom properties will be set to\n     * @param customProperties dictionary of properties to set\n     */\n    static setCustomProperties(elementRef: ElementRef, customProperties: { [k: string]: any }): void {\n        Object.keys(customProperties).forEach((propertyKey: string) => {\n            elementRef.nativeElement.style.setProperty(propertyKey, customProperties[propertyKey]);\n        });\n    }\n\n    /**\n     * Set css custom properties based on a palette name and values and onto and onto an ElementRef styles\n     * @param elementRef element where custom properties will be set\n     * @param paletteValues color values\n     * @param paletteName name of the palette to set\n     * @param options custom to set if needed\n     */\n    static setPaletteCustomProperties(elementRef: ElementRef, paletteValues: PaletteValues | string, paletteName: Palettes,\n        options?: ThemingExtraOptions) {\n        options = { ...DEFAULT_THEMING_EXTRA_OPTIONS, ...options };\n        if (!paletteValues) console.error(this, `paletteValues should be <string | PaletteValues>`, paletteValues);\n        const defaultColor = (typeof paletteValues === 'string') ?\n            ThemingUtil.getHexValueFromColor(paletteValues) : ThemingUtil.getHexValueFromColor(paletteValues.default);\n        const autoColors: [string, string, string, string] = options.autoAdjust && ThemingUtil.getIsBright(defaultColor, options.brightnessFactor)\n            ? ThemingUtil.getColorsFromLightColor(defaultColor) : ThemingUtil.getColorsFromBase(defaultColor);\n        const autoContrasts = autoColors.map(ThemingUtil.getHexValueFromColor).map(ThemingUtil.getForegroundColorW3C).map(ThemingUtil.getColorString);\n        const customProperties: { [k: string]: any } = {};\n        const paletteKeys = ThemingUtil.getPaletteCustomPropertiesNames(paletteName, false);\n        paletteKeys.forEach((key: string, index: number) =>\n            customProperties[paletteKeys[index]] = ((paletteValues as PaletteValues)[CommonPaletteValues[index]]) || autoColors[index]);\n        if (AUTO_GENERATE_FOREGROUNDS) {\n            const contrastKeys = ThemingUtil.getPaletteCustomPropertiesNames(paletteName, true);\n            contrastKeys.forEach((key: string, index: number) =>\n                customProperties[contrastKeys[index]] = getProperty(paletteValues, `contrast.${ contrastKeys[index] }`) || autoContrasts[index]);\n        }\n        ThemingUtil.setCustomProperties(elementRef, customProperties);\n    }\n\n    /**\n     * Return custom property keys for a palette\n     * @param contrast flag indicating to return contrast custom properties keys\n     */\n    static getPaletteCustomPropertiesNames(paletteName: string, contrast: boolean = false): [string, string, string, string] {\n        const contrastModifier: string = !contrast ? '' : 'contrast-';\n        return [\n            `--${ paletteName }-palette-${ contrastModifier }default`,\n            `--${ paletteName }-palette-${ contrastModifier }lighter`,\n            `--${ paletteName }-palette-${ contrastModifier }darker`,\n            `--${ paletteName }-palette-${ contrastModifier }hover`,\n        ];\n    }\n\n    /**\n     * Get hex color from either an hex or `r, g, b` string\n     * @param color  hex or `r, g, b` string\n     */\n    static getHexValueFromColor(color: string): string {\n        if (!color.includes('#')) {\n            const colorRGB: number[] = color.replace(/\\s/gi, '').split(',').map((val) => parseInt(val));\n            color = rgb(colorRGB[0], colorRGB[1], colorRGB[2]).hex();\n        }\n        return color;\n    }\n\n    /**\n     * AutoGenerate foreground color based on a background color\n     * http://www.w3.org/TR/AERT#color-contrast\n     * @param backgroundColor background color from which the foreground color will be calculated\n     */\n    static getForegroundColorW3C(backgroundColor: string): string {\n        return ThemingUtil.getIsBright(backgroundColor, FOREGROUND_COLORS_BRIGHT_FACTOR) ?  '#000000' : '#FFFFFF';\n    }\n\n    /**\n     * Resolve if color is bright (otherwise is dark)\n     * http://www.w3.org/TR/AERT#color-contrast\n     * @param color value to check if bright or dark should be applied\n     * @param brightFactor value from 0 to 255 that specifies the limit where this color is considered 'Bright'\n     */\n    static getIsBright(color: string, brightFactor: number): boolean {\n        const dColor = rgb(color);\n        const o = Math.round(((dColor.r * 299) + (dColor.g * 587) + (dColor.b * 114)) / 1000);\n        return o > brightFactor;\n    }\n}\n","import { ApplicationRef, ElementRef, Inject, Injectable } from '@angular/core';\nimport { Palettes, PaletteValues, ThemingExtraOptions } from './definitions';\nimport { DEFAULT_THEME_PALETTES, PaletteValuesType } from './definitions';\nimport { deepCopy } from './utils';\nimport { ThemingUtil } from './utils';\nimport { DOCUMENT } from '@angular/common';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, pluck } from 'rxjs/operators';\n\n/**\n *  Rationale: This provider is a singleton and should be injected only once, since it styles the application when constructor is executed\n *  Pitfall: YOU MUST NOT provide this service via a component decorator, component providers won't respect `providedIn: 'root'` property value.\n */\n@Injectable({ providedIn: 'root' })\nexport class ThemingService {\n\n    private currentPalettes$: BehaviorSubject<PaletteValuesType> = new BehaviorSubject<PaletteValuesType>(DEFAULT_THEME_PALETTES);\n    private readonly rootElementRef: ElementRef;\n\n    constructor(\n        private appRef: ApplicationRef,\n        @Inject(DOCUMENT) private document: any,\n    ) {\n        // this.rootElementRef = this.appRef.components[0].location;\n        // this.initThemingPalettes();\n    }\n\n    /**\n     * Set the theming palette for a given scope/elementRef\n     * @param elementRef\n     * @param paletteValue\n     * @param paletteName\n     */\n    public setThemingPalette(elementRef: ElementRef, paletteValue: PaletteValues | string, paletteName: Palettes,\n        options?: ThemingExtraOptions): void {\n        ThemingUtil.setPaletteCustomProperties(elementRef, paletteValue, paletteName, options);\n    }\n\n    /**\n     * Set the theming palette application wide\n     * @param paletteValue\n     * @param paletteName\n     */\n    public setThemingPaletteForRoot(paletteValue: PaletteValues | string, paletteName: Palettes, options?: ThemingExtraOptions): void {\n        ThemingUtil.setPaletteCustomProperties(this.rootElementRef, paletteValue, paletteName, options);\n        ThemingUtil.setPaletteCustomProperties(this.rootElementRef, paletteValue, <any>`${ paletteName }-root`, options); // save for root\n        const defaultPalettes: any = deepCopy(this.currentPalettes$.value);\n        defaultPalettes[paletteName] = paletteValue;\n        this.currentPalettes$.next(defaultPalettes);\n    }\n\n    /**\n     * Observable that will push changes to the requested palette\n     * @param palette name of the palette\n     */\n    public getPaletteObservable(palette: Palettes): Observable<PaletteValues | string | {}> {\n        return this.currentPalettes$.pipe(\n            pluck(palette),\n            distinctUntilChanged()\n        );\n    }\n\n    /**\n     * Get palette values given a palette name and a ref (could be current component or app root)\n     * @param paletteName name of the palette which we want to query about\n     * @param ref element ref, helps mark context\n     */\n    public getDOMPaletteValues(paletteName: Palettes, ref: ElementRef = this.rootElementRef): PaletteValues {\n        const paletteCustomProperties =\n            ThemingUtil.getCustomProperties(ref, ThemingUtil.getPaletteCustomPropertiesNames(paletteName, true));\n        const paletteCustomPropertiesContrast =\n            ThemingUtil.getCustomProperties(ref, ThemingUtil.getPaletteCustomPropertiesNames(paletteName, true));\n        return {\n            default: paletteCustomProperties[0],\n            lighter: paletteCustomProperties[1],\n            darker: paletteCustomProperties[2],\n            hover: paletteCustomProperties[3],\n            contrast: {\n                default: paletteCustomPropertiesContrast[0],\n                lighter: paletteCustomPropertiesContrast[1],\n                darker: paletteCustomPropertiesContrast[2],\n                hover: paletteCustomPropertiesContrast[3],\n            }\n        };\n    }\n\n    /**\n     * Get current value of the palette\n     * @param palette name of the palette\n     */\n    public getPalette(palette: Palettes): PaletteValues | string {\n        return this.currentPalettes$.value[palette];\n    }\n\n    /**\n     * Initialize application theming palettes\n     */\n    private initThemingPalettes(): void {\n        Object.keys(this.currentPalettes$.value).forEach((palette: Palettes) => {\n            ThemingUtil.setPaletteCustomProperties(this.rootElementRef, DEFAULT_THEME_PALETTES[palette], palette);\n            ThemingUtil.setPaletteCustomProperties(this.rootElementRef, DEFAULT_THEME_PALETTES[palette], <any>`${ palette }-root`); // save for root\n        });\n    }\n\n    /**\n     * Temporary showcase method, initiates the change of the theme palettes to random color values\n     */\n    private initThemeDemo(): void {\n        // TODO: maybe integrate with some music?\n    }\n\n}\n","import { NgModule } from '@angular/core';\n\n// TODO: configuration: add forRoot provisioning of configuration\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class ThemingModule { }\n"],"names":["CommonPaletteValues","CommonPaletteValuesEnum","color","d3Color"],"mappings":"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"}
